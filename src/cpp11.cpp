// Generated by cpp11: do not edit by hand
// clang-format off

#include "stochtree_types.h"
#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// bcf.cpp
cpp11::external_pointer<StochTree::BCFModelWrapper> bcf_init_cpp(bool univariate_treatment);
extern "C" SEXP _stochtree_bcf_init_cpp(SEXP univariate_treatment) {
  BEGIN_CPP11
    return cpp11::as_sexp(bcf_init_cpp(cpp11::as_cpp<cpp11::decay_t<bool>>(univariate_treatment)));
  END_CPP11
}
// bcf.cpp
void bcf_add_train_with_weights_cpp(cpp11::external_pointer<StochTree::BCFModelWrapper> bcf_wrapper, cpp11::doubles_matrix<> X_train_mu, cpp11::doubles_matrix<> X_train_tau, cpp11::doubles_matrix<> Z_train, cpp11::doubles y_train, cpp11::doubles weights_train, bool treatment_binary);
extern "C" SEXP _stochtree_bcf_add_train_with_weights_cpp(SEXP bcf_wrapper, SEXP X_train_mu, SEXP X_train_tau, SEXP Z_train, SEXP y_train, SEXP weights_train, SEXP treatment_binary) {
  BEGIN_CPP11
    bcf_add_train_with_weights_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::BCFModelWrapper>>>(bcf_wrapper), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(X_train_mu), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(X_train_tau), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(Z_train), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(y_train), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(weights_train), cpp11::as_cpp<cpp11::decay_t<bool>>(treatment_binary));
    return R_NilValue;
  END_CPP11
}
// bcf.cpp
void bcf_add_train_no_weights_cpp(cpp11::external_pointer<StochTree::BCFModelWrapper> bcf_wrapper, cpp11::doubles_matrix<> X_train_mu, cpp11::doubles_matrix<> X_train_tau, cpp11::doubles_matrix<> Z_train, cpp11::doubles y_train, bool treatment_binary);
extern "C" SEXP _stochtree_bcf_add_train_no_weights_cpp(SEXP bcf_wrapper, SEXP X_train_mu, SEXP X_train_tau, SEXP Z_train, SEXP y_train, SEXP treatment_binary) {
  BEGIN_CPP11
    bcf_add_train_no_weights_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::BCFModelWrapper>>>(bcf_wrapper), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(X_train_mu), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(X_train_tau), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(Z_train), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(y_train), cpp11::as_cpp<cpp11::decay_t<bool>>(treatment_binary));
    return R_NilValue;
  END_CPP11
}
// bcf.cpp
void bcf_add_test_cpp(cpp11::external_pointer<StochTree::BCFModelWrapper> bcf_wrapper, cpp11::doubles_matrix<> X_test_mu, cpp11::doubles_matrix<> X_test_tau, cpp11::doubles_matrix<> Z_test);
extern "C" SEXP _stochtree_bcf_add_test_cpp(SEXP bcf_wrapper, SEXP X_test_mu, SEXP X_test_tau, SEXP Z_test) {
  BEGIN_CPP11
    bcf_add_test_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::BCFModelWrapper>>>(bcf_wrapper), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(X_test_mu), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(X_test_tau), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(Z_test));
    return R_NilValue;
  END_CPP11
}
// bcf.cpp
void bcf_reset_global_var_samples_cpp(cpp11::external_pointer<StochTree::BCFModelWrapper> bcf_wrapper, cpp11::doubles data_vector);
extern "C" SEXP _stochtree_bcf_reset_global_var_samples_cpp(SEXP bcf_wrapper, SEXP data_vector) {
  BEGIN_CPP11
    bcf_reset_global_var_samples_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::BCFModelWrapper>>>(bcf_wrapper), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(data_vector));
    return R_NilValue;
  END_CPP11
}
// bcf.cpp
void bcf_reset_prognostic_leaf_var_samples_cpp(cpp11::external_pointer<StochTree::BCFModelWrapper> bcf_wrapper, cpp11::doubles data_vector);
extern "C" SEXP _stochtree_bcf_reset_prognostic_leaf_var_samples_cpp(SEXP bcf_wrapper, SEXP data_vector) {
  BEGIN_CPP11
    bcf_reset_prognostic_leaf_var_samples_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::BCFModelWrapper>>>(bcf_wrapper), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(data_vector));
    return R_NilValue;
  END_CPP11
}
// bcf.cpp
void bcf_reset_treatment_leaf_var_samples_cpp(cpp11::external_pointer<StochTree::BCFModelWrapper> bcf_wrapper, cpp11::doubles data_vector);
extern "C" SEXP _stochtree_bcf_reset_treatment_leaf_var_samples_cpp(SEXP bcf_wrapper, SEXP data_vector) {
  BEGIN_CPP11
    bcf_reset_treatment_leaf_var_samples_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::BCFModelWrapper>>>(bcf_wrapper), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(data_vector));
    return R_NilValue;
  END_CPP11
}
// bcf.cpp
void bcf_reset_treatment_coding_samples_cpp(cpp11::external_pointer<StochTree::BCFModelWrapper> bcf_wrapper, cpp11::doubles data_vector);
extern "C" SEXP _stochtree_bcf_reset_treatment_coding_samples_cpp(SEXP bcf_wrapper, SEXP data_vector) {
  BEGIN_CPP11
    bcf_reset_treatment_coding_samples_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::BCFModelWrapper>>>(bcf_wrapper), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(data_vector));
    return R_NilValue;
  END_CPP11
}
// bcf.cpp
void bcf_reset_control_coding_samples_cpp(cpp11::external_pointer<StochTree::BCFModelWrapper> bcf_wrapper, cpp11::doubles data_vector);
extern "C" SEXP _stochtree_bcf_reset_control_coding_samples_cpp(SEXP bcf_wrapper, SEXP data_vector) {
  BEGIN_CPP11
    bcf_reset_control_coding_samples_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::BCFModelWrapper>>>(bcf_wrapper), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(data_vector));
    return R_NilValue;
  END_CPP11
}
// bcf.cpp
void bcf_reset_train_prediction_samples_cpp(cpp11::external_pointer<StochTree::BCFModelWrapper> bcf_wrapper, cpp11::doubles_matrix<> muhat, cpp11::doubles tauhat, cpp11::doubles_matrix<> yhat, int num_obs, int num_samples, int treatment_dim);
extern "C" SEXP _stochtree_bcf_reset_train_prediction_samples_cpp(SEXP bcf_wrapper, SEXP muhat, SEXP tauhat, SEXP yhat, SEXP num_obs, SEXP num_samples, SEXP treatment_dim) {
  BEGIN_CPP11
    bcf_reset_train_prediction_samples_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::BCFModelWrapper>>>(bcf_wrapper), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(muhat), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(tauhat), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(yhat), cpp11::as_cpp<cpp11::decay_t<int>>(num_obs), cpp11::as_cpp<cpp11::decay_t<int>>(num_samples), cpp11::as_cpp<cpp11::decay_t<int>>(treatment_dim));
    return R_NilValue;
  END_CPP11
}
// bcf.cpp
void bcf_reset_test_prediction_samples_cpp(cpp11::external_pointer<StochTree::BCFModelWrapper> bcf_wrapper, cpp11::doubles_matrix<> muhat, cpp11::doubles tauhat, cpp11::doubles_matrix<> yhat, int num_obs, int num_samples, int treatment_dim);
extern "C" SEXP _stochtree_bcf_reset_test_prediction_samples_cpp(SEXP bcf_wrapper, SEXP muhat, SEXP tauhat, SEXP yhat, SEXP num_obs, SEXP num_samples, SEXP treatment_dim) {
  BEGIN_CPP11
    bcf_reset_test_prediction_samples_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::BCFModelWrapper>>>(bcf_wrapper), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(muhat), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(tauhat), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(yhat), cpp11::as_cpp<cpp11::decay_t<int>>(num_obs), cpp11::as_cpp<cpp11::decay_t<int>>(num_samples), cpp11::as_cpp<cpp11::decay_t<int>>(treatment_dim));
    return R_NilValue;
  END_CPP11
}
// bcf.cpp
void sample_bcf_univariate_cpp(cpp11::external_pointer<StochTree::BCFModelWrapper> bcf_wrapper, cpp11::external_pointer<StochTree::ForestContainer> forest_samples_mu, cpp11::external_pointer<StochTree::ForestContainer> forest_samples_tau, cpp11::external_pointer<std::mt19937> rng, int cutpoint_grid_size, double sigma_leaf_mu, double sigma_leaf_tau, double alpha_mu, double alpha_tau, double beta_mu, double beta_tau, int min_samples_leaf_mu, int min_samples_leaf_tau, double nu, double lamb, double a_leaf_mu, double a_leaf_tau, double b_leaf_mu, double b_leaf_tau, double sigma2, int num_trees_mu, int num_trees_tau, double b1, double b0, cpp11::integers feature_types_mu_int, cpp11::integers feature_types_tau_int, int num_gfr, int num_burnin, int num_mcmc, double leaf_init_mu, double leaf_init_tau);
extern "C" SEXP _stochtree_sample_bcf_univariate_cpp(SEXP bcf_wrapper, SEXP forest_samples_mu, SEXP forest_samples_tau, SEXP rng, SEXP cutpoint_grid_size, SEXP sigma_leaf_mu, SEXP sigma_leaf_tau, SEXP alpha_mu, SEXP alpha_tau, SEXP beta_mu, SEXP beta_tau, SEXP min_samples_leaf_mu, SEXP min_samples_leaf_tau, SEXP nu, SEXP lamb, SEXP a_leaf_mu, SEXP a_leaf_tau, SEXP b_leaf_mu, SEXP b_leaf_tau, SEXP sigma2, SEXP num_trees_mu, SEXP num_trees_tau, SEXP b1, SEXP b0, SEXP feature_types_mu_int, SEXP feature_types_tau_int, SEXP num_gfr, SEXP num_burnin, SEXP num_mcmc, SEXP leaf_init_mu, SEXP leaf_init_tau) {
  BEGIN_CPP11
    sample_bcf_univariate_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::BCFModelWrapper>>>(bcf_wrapper), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples_mu), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples_tau), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<std::mt19937>>>(rng), cpp11::as_cpp<cpp11::decay_t<int>>(cutpoint_grid_size), cpp11::as_cpp<cpp11::decay_t<double>>(sigma_leaf_mu), cpp11::as_cpp<cpp11::decay_t<double>>(sigma_leaf_tau), cpp11::as_cpp<cpp11::decay_t<double>>(alpha_mu), cpp11::as_cpp<cpp11::decay_t<double>>(alpha_tau), cpp11::as_cpp<cpp11::decay_t<double>>(beta_mu), cpp11::as_cpp<cpp11::decay_t<double>>(beta_tau), cpp11::as_cpp<cpp11::decay_t<int>>(min_samples_leaf_mu), cpp11::as_cpp<cpp11::decay_t<int>>(min_samples_leaf_tau), cpp11::as_cpp<cpp11::decay_t<double>>(nu), cpp11::as_cpp<cpp11::decay_t<double>>(lamb), cpp11::as_cpp<cpp11::decay_t<double>>(a_leaf_mu), cpp11::as_cpp<cpp11::decay_t<double>>(a_leaf_tau), cpp11::as_cpp<cpp11::decay_t<double>>(b_leaf_mu), cpp11::as_cpp<cpp11::decay_t<double>>(b_leaf_tau), cpp11::as_cpp<cpp11::decay_t<double>>(sigma2), cpp11::as_cpp<cpp11::decay_t<int>>(num_trees_mu), cpp11::as_cpp<cpp11::decay_t<int>>(num_trees_tau), cpp11::as_cpp<cpp11::decay_t<double>>(b1), cpp11::as_cpp<cpp11::decay_t<double>>(b0), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(feature_types_mu_int), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(feature_types_tau_int), cpp11::as_cpp<cpp11::decay_t<int>>(num_gfr), cpp11::as_cpp<cpp11::decay_t<int>>(num_burnin), cpp11::as_cpp<cpp11::decay_t<int>>(num_mcmc), cpp11::as_cpp<cpp11::decay_t<double>>(leaf_init_mu), cpp11::as_cpp<cpp11::decay_t<double>>(leaf_init_tau));
    return R_NilValue;
  END_CPP11
}
// bcf.cpp
void sample_bcf_multivariate_cpp(cpp11::external_pointer<StochTree::BCFModelWrapper> bcf_wrapper, cpp11::external_pointer<StochTree::ForestContainer> forest_samples_mu, cpp11::external_pointer<StochTree::ForestContainer> forest_samples_tau, cpp11::external_pointer<std::mt19937> rng, int cutpoint_grid_size, double sigma_leaf_mu, cpp11::doubles_matrix<> sigma_leaf_tau_r, double alpha_mu, double alpha_tau, double beta_mu, double beta_tau, int min_samples_leaf_mu, int min_samples_leaf_tau, double nu, double lamb, double a_leaf_mu, double a_leaf_tau, double b_leaf_mu, double b_leaf_tau, double sigma2, int num_trees_mu, int num_trees_tau, double b1, double b0, cpp11::integers feature_types_mu_int, cpp11::integers feature_types_tau_int, int num_gfr, int num_burnin, int num_mcmc, double leaf_init_mu, double leaf_init_tau);
extern "C" SEXP _stochtree_sample_bcf_multivariate_cpp(SEXP bcf_wrapper, SEXP forest_samples_mu, SEXP forest_samples_tau, SEXP rng, SEXP cutpoint_grid_size, SEXP sigma_leaf_mu, SEXP sigma_leaf_tau_r, SEXP alpha_mu, SEXP alpha_tau, SEXP beta_mu, SEXP beta_tau, SEXP min_samples_leaf_mu, SEXP min_samples_leaf_tau, SEXP nu, SEXP lamb, SEXP a_leaf_mu, SEXP a_leaf_tau, SEXP b_leaf_mu, SEXP b_leaf_tau, SEXP sigma2, SEXP num_trees_mu, SEXP num_trees_tau, SEXP b1, SEXP b0, SEXP feature_types_mu_int, SEXP feature_types_tau_int, SEXP num_gfr, SEXP num_burnin, SEXP num_mcmc, SEXP leaf_init_mu, SEXP leaf_init_tau) {
  BEGIN_CPP11
    sample_bcf_multivariate_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::BCFModelWrapper>>>(bcf_wrapper), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples_mu), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples_tau), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<std::mt19937>>>(rng), cpp11::as_cpp<cpp11::decay_t<int>>(cutpoint_grid_size), cpp11::as_cpp<cpp11::decay_t<double>>(sigma_leaf_mu), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(sigma_leaf_tau_r), cpp11::as_cpp<cpp11::decay_t<double>>(alpha_mu), cpp11::as_cpp<cpp11::decay_t<double>>(alpha_tau), cpp11::as_cpp<cpp11::decay_t<double>>(beta_mu), cpp11::as_cpp<cpp11::decay_t<double>>(beta_tau), cpp11::as_cpp<cpp11::decay_t<int>>(min_samples_leaf_mu), cpp11::as_cpp<cpp11::decay_t<int>>(min_samples_leaf_tau), cpp11::as_cpp<cpp11::decay_t<double>>(nu), cpp11::as_cpp<cpp11::decay_t<double>>(lamb), cpp11::as_cpp<cpp11::decay_t<double>>(a_leaf_mu), cpp11::as_cpp<cpp11::decay_t<double>>(a_leaf_tau), cpp11::as_cpp<cpp11::decay_t<double>>(b_leaf_mu), cpp11::as_cpp<cpp11::decay_t<double>>(b_leaf_tau), cpp11::as_cpp<cpp11::decay_t<double>>(sigma2), cpp11::as_cpp<cpp11::decay_t<int>>(num_trees_mu), cpp11::as_cpp<cpp11::decay_t<int>>(num_trees_tau), cpp11::as_cpp<cpp11::decay_t<double>>(b1), cpp11::as_cpp<cpp11::decay_t<double>>(b0), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(feature_types_mu_int), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(feature_types_tau_int), cpp11::as_cpp<cpp11::decay_t<int>>(num_gfr), cpp11::as_cpp<cpp11::decay_t<int>>(num_burnin), cpp11::as_cpp<cpp11::decay_t<int>>(num_mcmc), cpp11::as_cpp<cpp11::decay_t<double>>(leaf_init_mu), cpp11::as_cpp<cpp11::decay_t<double>>(leaf_init_tau));
    return R_NilValue;
  END_CPP11
}
// data.cpp
cpp11::external_pointer<StochTree::ForestDataset> create_forest_dataset_cpp();
extern "C" SEXP _stochtree_create_forest_dataset_cpp() {
  BEGIN_CPP11
    return cpp11::as_sexp(create_forest_dataset_cpp());
  END_CPP11
}
// data.cpp
int dataset_num_rows_cpp(cpp11::external_pointer<StochTree::ForestDataset> dataset);
extern "C" SEXP _stochtree_dataset_num_rows_cpp(SEXP dataset) {
  BEGIN_CPP11
    return cpp11::as_sexp(dataset_num_rows_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(dataset)));
  END_CPP11
}
// data.cpp
int dataset_num_covariates_cpp(cpp11::external_pointer<StochTree::ForestDataset> dataset);
extern "C" SEXP _stochtree_dataset_num_covariates_cpp(SEXP dataset) {
  BEGIN_CPP11
    return cpp11::as_sexp(dataset_num_covariates_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(dataset)));
  END_CPP11
}
// data.cpp
int dataset_num_basis_cpp(cpp11::external_pointer<StochTree::ForestDataset> dataset);
extern "C" SEXP _stochtree_dataset_num_basis_cpp(SEXP dataset) {
  BEGIN_CPP11
    return cpp11::as_sexp(dataset_num_basis_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(dataset)));
  END_CPP11
}
// data.cpp
bool dataset_has_basis_cpp(cpp11::external_pointer<StochTree::ForestDataset> dataset);
extern "C" SEXP _stochtree_dataset_has_basis_cpp(SEXP dataset) {
  BEGIN_CPP11
    return cpp11::as_sexp(dataset_has_basis_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(dataset)));
  END_CPP11
}
// data.cpp
bool dataset_has_variance_weights_cpp(cpp11::external_pointer<StochTree::ForestDataset> dataset);
extern "C" SEXP _stochtree_dataset_has_variance_weights_cpp(SEXP dataset) {
  BEGIN_CPP11
    return cpp11::as_sexp(dataset_has_variance_weights_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(dataset)));
  END_CPP11
}
// data.cpp
void forest_dataset_add_covariates_cpp(cpp11::external_pointer<StochTree::ForestDataset> dataset_ptr, cpp11::doubles_matrix<> covariates);
extern "C" SEXP _stochtree_forest_dataset_add_covariates_cpp(SEXP dataset_ptr, SEXP covariates) {
  BEGIN_CPP11
    forest_dataset_add_covariates_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(dataset_ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(covariates));
    return R_NilValue;
  END_CPP11
}
// data.cpp
void forest_dataset_add_basis_cpp(cpp11::external_pointer<StochTree::ForestDataset> dataset_ptr, cpp11::doubles_matrix<> basis);
extern "C" SEXP _stochtree_forest_dataset_add_basis_cpp(SEXP dataset_ptr, SEXP basis) {
  BEGIN_CPP11
    forest_dataset_add_basis_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(dataset_ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(basis));
    return R_NilValue;
  END_CPP11
}
// data.cpp
void forest_dataset_update_basis_cpp(cpp11::external_pointer<StochTree::ForestDataset> dataset_ptr, cpp11::doubles_matrix<> basis);
extern "C" SEXP _stochtree_forest_dataset_update_basis_cpp(SEXP dataset_ptr, SEXP basis) {
  BEGIN_CPP11
    forest_dataset_update_basis_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(dataset_ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(basis));
    return R_NilValue;
  END_CPP11
}
// data.cpp
void forest_dataset_add_weights_cpp(cpp11::external_pointer<StochTree::ForestDataset> dataset_ptr, cpp11::doubles weights);
extern "C" SEXP _stochtree_forest_dataset_add_weights_cpp(SEXP dataset_ptr, SEXP weights) {
  BEGIN_CPP11
    forest_dataset_add_weights_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(dataset_ptr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(weights));
    return R_NilValue;
  END_CPP11
}
// data.cpp
cpp11::external_pointer<StochTree::ColumnVector> create_column_vector_cpp(cpp11::doubles outcome);
extern "C" SEXP _stochtree_create_column_vector_cpp(SEXP outcome) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_column_vector_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(outcome)));
  END_CPP11
}
// predictor.cpp
cpp11::writable::doubles_matrix<> predict_forest_cpp(cpp11::external_pointer<StochTree::ForestContainer> forest_samples, cpp11::external_pointer<StochTree::ForestDataset> dataset);
extern "C" SEXP _stochtree_predict_forest_cpp(SEXP forest_samples, SEXP dataset) {
  BEGIN_CPP11
    return cpp11::as_sexp(predict_forest_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(dataset)));
  END_CPP11
}
// predictor.cpp
cpp11::writable::doubles_matrix<> predict_forest_raw_cpp(cpp11::external_pointer<StochTree::ForestContainer> forest_samples, cpp11::external_pointer<StochTree::ForestDataset> dataset);
extern "C" SEXP _stochtree_predict_forest_raw_cpp(SEXP forest_samples, SEXP dataset) {
  BEGIN_CPP11
    return cpp11::as_sexp(predict_forest_raw_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(dataset)));
  END_CPP11
}
// predictor.cpp
cpp11::writable::doubles_matrix<> predict_forest_raw_single_forest_cpp(cpp11::external_pointer<StochTree::ForestContainer> forest_samples, cpp11::external_pointer<StochTree::ForestDataset> dataset, int forest_num);
extern "C" SEXP _stochtree_predict_forest_raw_single_forest_cpp(SEXP forest_samples, SEXP dataset, SEXP forest_num) {
  BEGIN_CPP11
    return cpp11::as_sexp(predict_forest_raw_single_forest_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(dataset), cpp11::as_cpp<cpp11::decay_t<int>>(forest_num)));
  END_CPP11
}
// sampler.cpp
void sample_gfr_one_iteration_cpp(cpp11::external_pointer<StochTree::ForestDataset> data, cpp11::external_pointer<StochTree::ColumnVector> residual, cpp11::external_pointer<StochTree::ForestContainer> forest_samples, cpp11::external_pointer<StochTree::ForestTracker> tracker, cpp11::external_pointer<StochTree::TreePrior> split_prior, cpp11::external_pointer<std::mt19937> rng, cpp11::integers feature_types, int cutpoint_grid_size, cpp11::doubles_matrix<> leaf_model_scale_input, cpp11::doubles variable_weights, double global_variance, int leaf_model_int, bool pre_initialized);
extern "C" SEXP _stochtree_sample_gfr_one_iteration_cpp(SEXP data, SEXP residual, SEXP forest_samples, SEXP tracker, SEXP split_prior, SEXP rng, SEXP feature_types, SEXP cutpoint_grid_size, SEXP leaf_model_scale_input, SEXP variable_weights, SEXP global_variance, SEXP leaf_model_int, SEXP pre_initialized) {
  BEGIN_CPP11
    sample_gfr_one_iteration_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(data), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ColumnVector>>>(residual), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestTracker>>>(tracker), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::TreePrior>>>(split_prior), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<std::mt19937>>>(rng), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(feature_types), cpp11::as_cpp<cpp11::decay_t<int>>(cutpoint_grid_size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(leaf_model_scale_input), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(variable_weights), cpp11::as_cpp<cpp11::decay_t<double>>(global_variance), cpp11::as_cpp<cpp11::decay_t<int>>(leaf_model_int), cpp11::as_cpp<cpp11::decay_t<bool>>(pre_initialized));
    return R_NilValue;
  END_CPP11
}
// sampler.cpp
void sample_mcmc_one_iteration_cpp(cpp11::external_pointer<StochTree::ForestDataset> data, cpp11::external_pointer<StochTree::ColumnVector> residual, cpp11::external_pointer<StochTree::ForestContainer> forest_samples, cpp11::external_pointer<StochTree::ForestTracker> tracker, cpp11::external_pointer<StochTree::TreePrior> split_prior, cpp11::external_pointer<std::mt19937> rng, cpp11::integers feature_types, int cutpoint_grid_size, cpp11::doubles_matrix<> leaf_model_scale_input, cpp11::doubles variable_weights, double global_variance, int leaf_model_int, bool pre_initialized);
extern "C" SEXP _stochtree_sample_mcmc_one_iteration_cpp(SEXP data, SEXP residual, SEXP forest_samples, SEXP tracker, SEXP split_prior, SEXP rng, SEXP feature_types, SEXP cutpoint_grid_size, SEXP leaf_model_scale_input, SEXP variable_weights, SEXP global_variance, SEXP leaf_model_int, SEXP pre_initialized) {
  BEGIN_CPP11
    sample_mcmc_one_iteration_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(data), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ColumnVector>>>(residual), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestTracker>>>(tracker), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::TreePrior>>>(split_prior), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<std::mt19937>>>(rng), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(feature_types), cpp11::as_cpp<cpp11::decay_t<int>>(cutpoint_grid_size), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(leaf_model_scale_input), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(variable_weights), cpp11::as_cpp<cpp11::decay_t<double>>(global_variance), cpp11::as_cpp<cpp11::decay_t<int>>(leaf_model_int), cpp11::as_cpp<cpp11::decay_t<bool>>(pre_initialized));
    return R_NilValue;
  END_CPP11
}
// sampler.cpp
double sample_sigma2_one_iteration_cpp(cpp11::external_pointer<StochTree::ColumnVector> residual, cpp11::external_pointer<std::mt19937> rng, double nu, double lambda);
extern "C" SEXP _stochtree_sample_sigma2_one_iteration_cpp(SEXP residual, SEXP rng, SEXP nu, SEXP lambda) {
  BEGIN_CPP11
    return cpp11::as_sexp(sample_sigma2_one_iteration_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ColumnVector>>>(residual), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<std::mt19937>>>(rng), cpp11::as_cpp<cpp11::decay_t<double>>(nu), cpp11::as_cpp<cpp11::decay_t<double>>(lambda)));
  END_CPP11
}
// sampler.cpp
double sample_tau_one_iteration_cpp(cpp11::external_pointer<StochTree::ForestContainer> forest_samples, cpp11::external_pointer<std::mt19937> rng, double a, double b, int sample_num);
extern "C" SEXP _stochtree_sample_tau_one_iteration_cpp(SEXP forest_samples, SEXP rng, SEXP a, SEXP b, SEXP sample_num) {
  BEGIN_CPP11
    return cpp11::as_sexp(sample_tau_one_iteration_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<std::mt19937>>>(rng), cpp11::as_cpp<cpp11::decay_t<double>>(a), cpp11::as_cpp<cpp11::decay_t<double>>(b), cpp11::as_cpp<cpp11::decay_t<int>>(sample_num)));
  END_CPP11
}
// sampler.cpp
cpp11::external_pointer<std::mt19937> rng_cpp(int random_seed);
extern "C" SEXP _stochtree_rng_cpp(SEXP random_seed) {
  BEGIN_CPP11
    return cpp11::as_sexp(rng_cpp(cpp11::as_cpp<cpp11::decay_t<int>>(random_seed)));
  END_CPP11
}
// sampler.cpp
cpp11::external_pointer<StochTree::ForestContainer> forest_container_cpp(int num_trees, int output_dimension, bool is_leaf_constant);
extern "C" SEXP _stochtree_forest_container_cpp(SEXP num_trees, SEXP output_dimension, SEXP is_leaf_constant) {
  BEGIN_CPP11
    return cpp11::as_sexp(forest_container_cpp(cpp11::as_cpp<cpp11::decay_t<int>>(num_trees), cpp11::as_cpp<cpp11::decay_t<int>>(output_dimension), cpp11::as_cpp<cpp11::decay_t<bool>>(is_leaf_constant)));
  END_CPP11
}
// sampler.cpp
int num_samples_forest_container_cpp(cpp11::external_pointer<StochTree::ForestContainer> forest_samples);
extern "C" SEXP _stochtree_num_samples_forest_container_cpp(SEXP forest_samples) {
  BEGIN_CPP11
    return cpp11::as_sexp(num_samples_forest_container_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples)));
  END_CPP11
}
// sampler.cpp
void json_save_forest_container_cpp(cpp11::external_pointer<StochTree::ForestContainer> forest_samples, std::string json_filename);
extern "C" SEXP _stochtree_json_save_forest_container_cpp(SEXP forest_samples, SEXP json_filename) {
  BEGIN_CPP11
    json_save_forest_container_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples), cpp11::as_cpp<cpp11::decay_t<std::string>>(json_filename));
    return R_NilValue;
  END_CPP11
}
// sampler.cpp
void json_load_forest_container_cpp(cpp11::external_pointer<StochTree::ForestContainer> forest_samples, std::string json_filename);
extern "C" SEXP _stochtree_json_load_forest_container_cpp(SEXP forest_samples, SEXP json_filename) {
  BEGIN_CPP11
    json_load_forest_container_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples), cpp11::as_cpp<cpp11::decay_t<std::string>>(json_filename));
    return R_NilValue;
  END_CPP11
}
// sampler.cpp
int output_dimension_forest_container_cpp(cpp11::external_pointer<StochTree::ForestContainer> forest_samples);
extern "C" SEXP _stochtree_output_dimension_forest_container_cpp(SEXP forest_samples) {
  BEGIN_CPP11
    return cpp11::as_sexp(output_dimension_forest_container_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples)));
  END_CPP11
}
// sampler.cpp
int is_leaf_constant_forest_container_cpp(cpp11::external_pointer<StochTree::ForestContainer> forest_samples);
extern "C" SEXP _stochtree_is_leaf_constant_forest_container_cpp(SEXP forest_samples) {
  BEGIN_CPP11
    return cpp11::as_sexp(is_leaf_constant_forest_container_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples)));
  END_CPP11
}
// sampler.cpp
bool all_roots_forest_container_cpp(cpp11::external_pointer<StochTree::ForestContainer> forest_samples, int forest_num);
extern "C" SEXP _stochtree_all_roots_forest_container_cpp(SEXP forest_samples, SEXP forest_num) {
  BEGIN_CPP11
    return cpp11::as_sexp(all_roots_forest_container_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples), cpp11::as_cpp<cpp11::decay_t<int>>(forest_num)));
  END_CPP11
}
// sampler.cpp
void add_sample_forest_container_cpp(cpp11::external_pointer<StochTree::ForestContainer> forest_samples);
extern "C" SEXP _stochtree_add_sample_forest_container_cpp(SEXP forest_samples) {
  BEGIN_CPP11
    add_sample_forest_container_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples));
    return R_NilValue;
  END_CPP11
}
// sampler.cpp
void set_leaf_value_forest_container_cpp(cpp11::external_pointer<StochTree::ForestContainer> forest_samples, double leaf_value);
extern "C" SEXP _stochtree_set_leaf_value_forest_container_cpp(SEXP forest_samples, SEXP leaf_value) {
  BEGIN_CPP11
    set_leaf_value_forest_container_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples), cpp11::as_cpp<cpp11::decay_t<double>>(leaf_value));
    return R_NilValue;
  END_CPP11
}
// sampler.cpp
void set_leaf_vector_forest_container_cpp(cpp11::external_pointer<StochTree::ForestContainer> forest_samples, cpp11::doubles leaf_vector);
extern "C" SEXP _stochtree_set_leaf_vector_forest_container_cpp(SEXP forest_samples, SEXP leaf_vector) {
  BEGIN_CPP11
    set_leaf_vector_forest_container_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(leaf_vector));
    return R_NilValue;
  END_CPP11
}
// sampler.cpp
void update_residual_forest_container_cpp(cpp11::external_pointer<StochTree::ForestDataset> data, cpp11::external_pointer<StochTree::ColumnVector> residual, cpp11::external_pointer<StochTree::ForestContainer> forest_samples, cpp11::external_pointer<StochTree::ForestTracker> tracker, bool requires_basis, int forest_num, bool add);
extern "C" SEXP _stochtree_update_residual_forest_container_cpp(SEXP data, SEXP residual, SEXP forest_samples, SEXP tracker, SEXP requires_basis, SEXP forest_num, SEXP add) {
  BEGIN_CPP11
    update_residual_forest_container_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(data), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ColumnVector>>>(residual), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestContainer>>>(forest_samples), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestTracker>>>(tracker), cpp11::as_cpp<cpp11::decay_t<bool>>(requires_basis), cpp11::as_cpp<cpp11::decay_t<int>>(forest_num), cpp11::as_cpp<cpp11::decay_t<bool>>(add));
    return R_NilValue;
  END_CPP11
}
// sampler.cpp
cpp11::external_pointer<StochTree::TreePrior> tree_prior_cpp(double alpha, double beta, int min_samples_leaf);
extern "C" SEXP _stochtree_tree_prior_cpp(SEXP alpha, SEXP beta, SEXP min_samples_leaf) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_prior_cpp(cpp11::as_cpp<cpp11::decay_t<double>>(alpha), cpp11::as_cpp<cpp11::decay_t<double>>(beta), cpp11::as_cpp<cpp11::decay_t<int>>(min_samples_leaf)));
  END_CPP11
}
// sampler.cpp
cpp11::external_pointer<StochTree::ForestTracker> forest_tracker_cpp(cpp11::external_pointer<StochTree::ForestDataset> data, cpp11::integers feature_types, int num_trees, StochTree::data_size_t n);
extern "C" SEXP _stochtree_forest_tracker_cpp(SEXP data, SEXP feature_types, SEXP num_trees, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(forest_tracker_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<StochTree::ForestDataset>>>(data), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(feature_types), cpp11::as_cpp<cpp11::decay_t<int>>(num_trees), cpp11::as_cpp<cpp11::decay_t<StochTree::data_size_t>>(n)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_stochtree_add_sample_forest_container_cpp",           (DL_FUNC) &_stochtree_add_sample_forest_container_cpp,            1},
    {"_stochtree_all_roots_forest_container_cpp",            (DL_FUNC) &_stochtree_all_roots_forest_container_cpp,             2},
    {"_stochtree_bcf_add_test_cpp",                          (DL_FUNC) &_stochtree_bcf_add_test_cpp,                           4},
    {"_stochtree_bcf_add_train_no_weights_cpp",              (DL_FUNC) &_stochtree_bcf_add_train_no_weights_cpp,               6},
    {"_stochtree_bcf_add_train_with_weights_cpp",            (DL_FUNC) &_stochtree_bcf_add_train_with_weights_cpp,             7},
    {"_stochtree_bcf_init_cpp",                              (DL_FUNC) &_stochtree_bcf_init_cpp,                               1},
    {"_stochtree_bcf_reset_control_coding_samples_cpp",      (DL_FUNC) &_stochtree_bcf_reset_control_coding_samples_cpp,       2},
    {"_stochtree_bcf_reset_global_var_samples_cpp",          (DL_FUNC) &_stochtree_bcf_reset_global_var_samples_cpp,           2},
    {"_stochtree_bcf_reset_prognostic_leaf_var_samples_cpp", (DL_FUNC) &_stochtree_bcf_reset_prognostic_leaf_var_samples_cpp,  2},
    {"_stochtree_bcf_reset_test_prediction_samples_cpp",     (DL_FUNC) &_stochtree_bcf_reset_test_prediction_samples_cpp,      7},
    {"_stochtree_bcf_reset_train_prediction_samples_cpp",    (DL_FUNC) &_stochtree_bcf_reset_train_prediction_samples_cpp,     7},
    {"_stochtree_bcf_reset_treatment_coding_samples_cpp",    (DL_FUNC) &_stochtree_bcf_reset_treatment_coding_samples_cpp,     2},
    {"_stochtree_bcf_reset_treatment_leaf_var_samples_cpp",  (DL_FUNC) &_stochtree_bcf_reset_treatment_leaf_var_samples_cpp,   2},
    {"_stochtree_create_column_vector_cpp",                  (DL_FUNC) &_stochtree_create_column_vector_cpp,                   1},
    {"_stochtree_create_forest_dataset_cpp",                 (DL_FUNC) &_stochtree_create_forest_dataset_cpp,                  0},
    {"_stochtree_dataset_has_basis_cpp",                     (DL_FUNC) &_stochtree_dataset_has_basis_cpp,                      1},
    {"_stochtree_dataset_has_variance_weights_cpp",          (DL_FUNC) &_stochtree_dataset_has_variance_weights_cpp,           1},
    {"_stochtree_dataset_num_basis_cpp",                     (DL_FUNC) &_stochtree_dataset_num_basis_cpp,                      1},
    {"_stochtree_dataset_num_covariates_cpp",                (DL_FUNC) &_stochtree_dataset_num_covariates_cpp,                 1},
    {"_stochtree_dataset_num_rows_cpp",                      (DL_FUNC) &_stochtree_dataset_num_rows_cpp,                       1},
    {"_stochtree_forest_container_cpp",                      (DL_FUNC) &_stochtree_forest_container_cpp,                       3},
    {"_stochtree_forest_dataset_add_basis_cpp",              (DL_FUNC) &_stochtree_forest_dataset_add_basis_cpp,               2},
    {"_stochtree_forest_dataset_add_covariates_cpp",         (DL_FUNC) &_stochtree_forest_dataset_add_covariates_cpp,          2},
    {"_stochtree_forest_dataset_add_weights_cpp",            (DL_FUNC) &_stochtree_forest_dataset_add_weights_cpp,             2},
    {"_stochtree_forest_dataset_update_basis_cpp",           (DL_FUNC) &_stochtree_forest_dataset_update_basis_cpp,            2},
    {"_stochtree_forest_tracker_cpp",                        (DL_FUNC) &_stochtree_forest_tracker_cpp,                         4},
    {"_stochtree_is_leaf_constant_forest_container_cpp",     (DL_FUNC) &_stochtree_is_leaf_constant_forest_container_cpp,      1},
    {"_stochtree_json_load_forest_container_cpp",            (DL_FUNC) &_stochtree_json_load_forest_container_cpp,             2},
    {"_stochtree_json_save_forest_container_cpp",            (DL_FUNC) &_stochtree_json_save_forest_container_cpp,             2},
    {"_stochtree_num_samples_forest_container_cpp",          (DL_FUNC) &_stochtree_num_samples_forest_container_cpp,           1},
    {"_stochtree_output_dimension_forest_container_cpp",     (DL_FUNC) &_stochtree_output_dimension_forest_container_cpp,      1},
    {"_stochtree_predict_forest_cpp",                        (DL_FUNC) &_stochtree_predict_forest_cpp,                         2},
    {"_stochtree_predict_forest_raw_cpp",                    (DL_FUNC) &_stochtree_predict_forest_raw_cpp,                     2},
    {"_stochtree_predict_forest_raw_single_forest_cpp",      (DL_FUNC) &_stochtree_predict_forest_raw_single_forest_cpp,       3},
    {"_stochtree_rng_cpp",                                   (DL_FUNC) &_stochtree_rng_cpp,                                    1},
    {"_stochtree_sample_bcf_multivariate_cpp",               (DL_FUNC) &_stochtree_sample_bcf_multivariate_cpp,               31},
    {"_stochtree_sample_bcf_univariate_cpp",                 (DL_FUNC) &_stochtree_sample_bcf_univariate_cpp,                 31},
    {"_stochtree_sample_gfr_one_iteration_cpp",              (DL_FUNC) &_stochtree_sample_gfr_one_iteration_cpp,              13},
    {"_stochtree_sample_mcmc_one_iteration_cpp",             (DL_FUNC) &_stochtree_sample_mcmc_one_iteration_cpp,             13},
    {"_stochtree_sample_sigma2_one_iteration_cpp",           (DL_FUNC) &_stochtree_sample_sigma2_one_iteration_cpp,            4},
    {"_stochtree_sample_tau_one_iteration_cpp",              (DL_FUNC) &_stochtree_sample_tau_one_iteration_cpp,               5},
    {"_stochtree_set_leaf_value_forest_container_cpp",       (DL_FUNC) &_stochtree_set_leaf_value_forest_container_cpp,        2},
    {"_stochtree_set_leaf_vector_forest_container_cpp",      (DL_FUNC) &_stochtree_set_leaf_vector_forest_container_cpp,       2},
    {"_stochtree_tree_prior_cpp",                            (DL_FUNC) &_stochtree_tree_prior_cpp,                             3},
    {"_stochtree_update_residual_forest_container_cpp",      (DL_FUNC) &_stochtree_update_residual_forest_container_cpp,       7},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_stochtree(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
